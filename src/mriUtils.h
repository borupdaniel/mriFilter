#ifndef MRIUTILS_H
#define MRIUTILS_H

# include <stdio.h>
# include <stdlib.h>
# include <math.h>
# include <limits.h>
# include <iostream>
# include <fstream>
# include <sstream>
# include <algorithm>
# include <vector>
# include <boost/algorithm/string.hpp>
# include "mpi.h"

# include "mriConstants.h"
# include "mriException.h"
# include "mriThresholdCriteria.h"
# include "mriTypes.h"

using namespace std;

// PRINT FUNCTIONS 
// WRITE PROGRAM HEADER
void writeHeader();
// WRITE MESSAGE TO SCREEN
void writeSchMessage(std::string Msg);

// MRI UTILITIES
namespace mriUtils{

  // GLOBAL VARIABLE FOR BOOST RANDOM NUMBER GENERATION
  static boost::random::mt19937 realGen;

  // Write Help
  void writeProgramHelp();

  // Home made Int to String Conversion
  string intToStr(int number);

  // Home made Float to String Conversion
  string floatToStr(double number);

  // Own String Split Method
  mriStringVec extractSubStringFromBufferMS(string Buffer);

  double do3DEucNorm(const mriDoubleVec& v);

  void normalize3DVector(mriDoubleVec& v);

  // Insert Value in String 
  void insertInList(double value, mriDoubleVec& list);
  void insertInList(int value, mriIntVec& list);

  // Sample from Standard Gaussian Distribution
  double generateStandardGaussian(double stDev);

  // Round Floating Point Value
  int round(double value);

  // Write Abcissae and Ordinates to file
  void writeGraphToFile(string fileName, int vecSize, mriDoubleVec& vecX, mriDoubleVec& vecY);

  // Perform 3D External Product
  void do3DExternalProduct(const mriDoubleVec& v1, const mriDoubleVec& v2, mriDoubleVec& resVec);

  // Check if Point is Inside/Outside Box
  bool isPointInsideBox(double xCoord, double yCoord, double zCoord, const mriDoubleVec& limitBox);

  // Print Binary Array To File
  void printBinArrayToFile(string fileName, int numberOfBins, const mriDoubleVec& binCenter, const mriDoubleVec& binValues);

// ==================================================
// Generate Uniform Integer (global Variable Defined)
// ==================================================
/*inline int GenerateUniformIntegers(int lowIdx, int upIdx) {
    boost::random::uniform_int_distribution<> dist(lowIdx, upIdx);
    //return dist(intGen);
    return 0;
}*/

// ======================
// GENERATE RANDOM VECTOR
// ======================
/*inline double* GenerateUniform01RandomVector(double& generator){
  double* resVec = new double[3];
  boost::random::uniform_real_distribution<> dist(0.0,1.0);
  // Generate Numbers Uniformly
  for(int loopA=0;loopA<3;loopA++){
		//resVec[loopA] = dist(realGen);
	}
  // Normalize
  mriUtils::Normalize3DVector(resVec);
	return resVec;
}*/
// ==========================
// SET SEED FOR GAUSSIAN
// =========================
inline void SetSeed(double seed){
  realGen.seed(static_cast<unsigned int>(seed));
}

// ==========================
// GENERATE STANDARD GAUSSIAN
// ==========================
inline double GenerateStandardGaussian(double stDev){
    
  // Allocate Vector
  boost::random::normal_distribution<> dist(0.0,stDev);
  // Add Random Component
  return dist(realGen);
}

// Apply Limit Box Factor
void applyLimitBoxFactors(double xFactor, double yFactor, double zFactor, mriDoubleVec& limitBox);

  // Print Matrix To File
  void printMatrixToFile(string fileName, const mriDoubleMat& Mat);

  // Read List of Files
  void readFileList(string listName, mriStringVec& fileList);

  // Read Matrix From File
  void readMatrixFromFile(string inFileName, int& nrow, int& ncol, mriDoubleMat& inMat);

  // Get Median of Double Vector
  double getMedian(mriDoubleVec& v);

  // Get Mean of Double Vector
  double getMean(const mriDoubleVec& v);

  // Get Eigenvalues of 3x3 Matrix
  void compute3x3MatrixEigenvals(double A[3][3], double root[3]);

  // Bouble Sort Array of Integer
  void sortIntArray(mriIntVec& faceIds);

  // Check that two integer vectors are the same
  bool isSameIntVector(const mriIntVec& one, const mriIntVec& two);

  // FIND HOW MANY INTERVALS
  int findHowMany(double distance, const mriDoubleVec& lengths);

  // CHECK ERROR GENERATED BY MPI
  void checkMpiError(int mpiError);

  // GET THRESHOLD QUANTITY STRING
  string getThresholdQtyString(int thresholdQty);

  // GET THRESHOLD TYPE STRING
  string getThresholdTypeString(int thresholdType);

  // GET MIN OF STD INT VECTOR
  int getMinInt(vector<int> vec);

  // CHECK IF STRING IS A FLOATING POINT
  bool isFloat(string token);

  // READ TABLE FROM FILE
  int readTableFromFile(string fileName, mriDoubleMat& table,bool skipFirstRow);

  // PRINT DOUBLE MATRIX
  void printDoubleMatToFile(string fileName, const mriDoubleMat& faceNormals);

  // PRINT INT MATRIX
  void printIntMatToFile(string fileName, const mriIntMat& mat);

  // PRINT DOUBLE VECTOR
  void printDoubleVecToFile(string fileName, const mriDoubleVec& vec);

  // PRINT DOUBLE VECTOR
  void printIntVecToFile(string fileName, const mriIntVec& vec);

  // PRINT DOUBLE MATRIX
  void printDoubleArrayToFile(string fileName, int size, double* vec);

  // NORMALIZE BIN ARRAY
  void normalizeBinArray(mriDoubleVec& binArray,double currInterval);

  // ASSIGN TO BIN ARRAY
  void assignToBin(double currValue, int numberOfBins, const mriDoubleVec& binMin, const mriDoubleVec& binMax, mriDoubleVec& binArray);

}
#endif //MRIUTILS_H
